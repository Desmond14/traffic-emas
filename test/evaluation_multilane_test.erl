-module(evaluation_multilane_test).


-include_lib("eunit/include/eunit.hrl").
-include("model.hrl").

move_cars_test() ->
  AllReds = #{4=>1, 5=>1, 8=>1, 9=>1},
  Lights = [AllReds, AllReds, AllReds, AllReds, AllReds],
  Data = input:load("test/evaluation_test.intersection", "test/evaluation_test.cars", 0.0),
  ?assertEqual(?INITIAL_FITNESS-5*4, evaluation_multilane:evaluate_solution(Lights, Data, false)).

move_cars2_test() ->
  GreenOnlyForCarId1 = #{4=>0, 5=>1, 8=>0, 9=>1},
  Lights = [GreenOnlyForCarId1, GreenOnlyForCarId1, GreenOnlyForCarId1, GreenOnlyForCarId1, GreenOnlyForCarId1],
  Data = input:load("test/evaluation_test.intersection", "test/evaluation_test.cars", 0.0),
%%  after third move car 1 is on destination lane
  ?assertEqual(?INITIAL_FITNESS-2*4-3*3, evaluation_multilane:evaluate_solution(Lights, Data, false)).


test_test() ->
  Data = input:load("input.intersection", "input.cars", 0.0),
  Lights = [#{5 => 0,6 => 0,7 => 0,8 => 0,9 => 0,10 => 0,11 => 0,12 => 0,14 => 0,15 => 0,16 => 0,17 => 0,20 => 0,21 => 0,22 => 0,23 => 0},
    #{5 => 0,6 => 0,7 => 0,8 => 0,9 => 0,10 => 0,11 => 0,12 => 0,14 => 0,15 => 0,16 => 0,17 => 0,20 => 0,21 => 0,22 => 0,23 => 0},
    #{5 => 0,6 => 0,7 => 0,8 => 0,9 => 0,10 => 0,11 => 0,12 => 0,14 => 0,15 => 0,16 => 0,17 => 0,20 => 0,21 => 0,22 => 0,23 => 0},
    #{5 => 0,6 => 0,7 => 0,8 => 0,9 => 0,10 => 0,11 => 0,12 => 0,14 => 0,15 => 0,16 => 0,17 => 0,20 => 1,21 => 0,22 => 0,23 => 0},
    #{5 => 0,6 => 0,7 => 0,8 => 0,9 => 0,10 => 0,11 => 0,12 => 0,14 => 0,15 => 0,16 => 0,17 => 0,20 => 1,21 => 0,22 => 0,23 => 0},
    #{5 => 0,6 => 0,7 => 0,8 => 0,9 => 0,10 => 0,11 => 0,12 => 0,14 => 0,15 => 0,16 => 0,17 => 0,20 => 1,21 => 0,22 => 0,23 => 0},
    #{5 => 1,6 => 2,7 => 2,8 => 2,9 => 2,10 => 2,11 => 2,12 => 2,14 => 2,15 => 0,16 => 2,17 => 2,20 => 2,21 => 2,22 => 2,23 => 2},
    #{5 => 1,6 => 2,7 => 2,8 => 2,9 => 2,10 => 2,11 => 0,12 => 2,14 => 2,15 => 2,16 => 2,17 => 2,20 => 2,21 => 2,22 => 2,23 => 2},
    #{5 => 2,6 => 2,7 => 2,8 => 2,9 => 2,10 => 2,11 => 0,12 => 2,14 => 2,15 => 2,16 => 2,17 => 0,20 => 2,21 => 2,22 => 2,23 => 2},
    #{5 => 2,6 => 1,7 => 2,8 => 2,9 => 2,10 => 2,11 => 2,12 => 2,14 => 2,15 => 2,16 => 2,17 => 2,20 => 2,21 => 2,22 => 2,23 => 2},
    #{5 => 2,6 => 1,7 => 2,8 => 2,9 => 2,10 => 2,11 => 2,12 => 2,14 => 2,15 => 2,16 => 2,17 => 2,20 => 2,21 => 2,22 => 2,23 => 2},
    #{5 => 2,6 => 2,7 => 2,8 => 2,9 => 2,10 => 2,11 => 2,12 => 2,14 => 2,15 => 2,16 => 2,17 => 2,20 => 2,21 => 2,22 => 2,23 => 2},
    #{5 => 2,6 => 2,7 => 2,8 => 2,9 => 2,10 => 2,11 => 2,12 => 2,14 => 2,15 => 2,16 => 0,17 => 2,20 => 2,21 => 2,22 => 2,23 => 2},
    #{5 => 2,6 => 2,7 => 2,8 => 2,9 => 2,10 => 2,11 => 2,12 => 2,14 => 2,15 => 2,16 => 0,17 => 2,20 => 2,21 => 2,22 => 2,23 => 2},
    #{5 => 2,6 => 2,7 => 2,8 => 2,9 => 2,10 => 2,11 => 2,12 => 2,14 => 2,15 => 2,16 => 0,17 => 2,20 => 2,21 => 2,22 => 2,23 => 2},
    #{5 => 2,6 => 2,7 => 2,8 => 2,9 => 2,10 => 2,11 => 2,12 => 2,14 => 2,15 => 2,16 => 2,17 => 0,20 => 2,21 => 2,22 => 2,23 => 1},
    #{5 => 2,6 => 2,7 => 1,8 => 1,9 => 2,10 => 2,11 => 2,12 => 2,14 => 2,15 => 2,16 => 2,17 => 0,20 => 2,21 => 2,22 => 2,23 => 1},
    #{5 => 2,6 => 2,7 => 1,8 => 1,9 => 2,10 => 2,11 => 2,12 => 2,14 => 2,15 => 2,16 => 2,17 => 2,20 => 2,21 => 2,22 => 2,23 => 1},
    #{5 => 2,6 => 2,7 => 2,8 => 2,9 => 2,10 => 2,11 => 2,12 => 2,14 => 2,15 => 2,16 => 2,17 => 2,20 => 2,21 => 2,22 => 2,23 => 2},
    #{5 => 2,6 => 2,7 => 2,8 => 2,9 => 2,10 => 2,11 => 2,12 => 2,14 => 2,15 => 2,16 => 2,17 => 2,20 => 2,21 => 2,22 => 2,23 => 2}],
  ct:pal("Fitness: ~p~n", [evaluation_multilane:evaluate_solution(Lights, Data, false)]).